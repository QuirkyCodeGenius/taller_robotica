# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'punto1_vectores.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import numpy as np
from operacion_vectores import Operaciones
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(600, 445)
        Dialog.setStyleSheet("background-color: rgb(0, 85, 255);\n"
"background-color: rgb(85, 170, 255);")
        self.vectores = QtWidgets.QLabel(Dialog)
        self.vectores.setGeometry(QtCore.QRect(260, 40, 81, 51))
        self.vectores.setObjectName("vectores")
        self.operacion = QtWidgets.QComboBox(Dialog)
        self.operacion.setGeometry(QtCore.QRect(190, 170, 81, 31))
        self.operacion.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.operacion.setObjectName("operacion")
        self.operacion.addItem("")
        self.operacion.addItem("")
        self.operacion.addItem("")
        self.operacion.addItem("")
        self.flecha = QtWidgets.QLabel(Dialog)
        self.flecha.setGeometry(QtCore.QRect(460, 170, 31, 31))
        self.flecha.setObjectName("flecha")
        self.botonEjecutar = QtWidgets.QPushButton(Dialog)
        self.botonEjecutar.setGeometry(QtCore.QRect(180, 260, 101, 31))
        self.botonEjecutar.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.botonEjecutar.setObjectName("botonEjecutar")
        self.nombre_primer_vector = QtWidgets.QLabel(Dialog)
        self.nombre_primer_vector.setGeometry(QtCore.QRect(30, 110, 151, 31))
        self.nombre_primer_vector.setStyleSheet("border-color: rgb(0, 0, 0);")
        self.nombre_primer_vector.setObjectName("nombre_primer_vector")
        self.nombre_segundo_vector = QtWidgets.QLabel(Dialog)
        self.nombre_segundo_vector.setGeometry(QtCore.QRect(320, 110, 111, 31))
        self.nombre_segundo_vector.setObjectName("nombre_segundo_vector")
        self.primerVectorA = QtWidgets.QTextEdit(Dialog)
        self.primerVectorA.setGeometry(QtCore.QRect(10, 170, 41, 31))
        self.primerVectorA.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.primerVectorA.setObjectName("primervectorA")
        self.primerVectorB = QtWidgets.QTextEdit(Dialog)
        self.primerVectorB.setGeometry(QtCore.QRect(60, 170, 41, 31))
        self.primerVectorB.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.primerVectorB.setObjectName("primerVectorB")
        self.primerVectorC = QtWidgets.QTextEdit(Dialog)
        self.primerVectorC.setGeometry(QtCore.QRect(110, 170, 41, 31))
        self.primerVectorC.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.primerVectorC.setObjectName("primerVectorC")
        self.segundoVectorA = QtWidgets.QTextEdit(Dialog)
        self.segundoVectorA.setGeometry(QtCore.QRect(300, 170, 41, 31))
        self.segundoVectorA.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.segundoVectorA.setObjectName("segundoVectorA")
        self.segundoVectorB = QtWidgets.QTextEdit(Dialog)
        self.segundoVectorB.setGeometry(QtCore.QRect(350, 170, 41, 31))
        self.segundoVectorB.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.segundoVectorB.setObjectName("segundoVectorB")
        self.tercerVectorC = QtWidgets.QTextEdit(Dialog)
        self.tercerVectorC.setGeometry(QtCore.QRect(400, 170, 41, 31))
        self.tercerVectorC.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.tercerVectorC.setObjectName("tercerVectorC")
        self.resultadoPoductoPunto = QtWidgets.QTextEdit(Dialog)
        self.resultadoPoductoPunto.setGeometry(QtCore.QRect(500, 170, 71, 31))
        self.resultadoPoductoPunto.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.resultadoPoductoPunto.setObjectName("resultadoPoductoPunto")
        self.resultadoProductoCruz = QtWidgets.QTextEdit(Dialog)
        self.resultadoProductoCruz.setGeometry(QtCore.QRect(500, 240, 71, 31))
        self.resultadoProductoCruz.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.resultadoProductoCruz.setObjectName("resultadoProductoCruz")

        
        #self.botonEjecutar.clicked.connect(self.handleExecute)        
        

        self.retranslateUi(Dialog)        
        
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.vectores.setText(_translate("Dialog", "    VECTORES"))
        self.operacion.setItemText(0, _translate("Dialog", "+"))
        self.operacion.setItemText(1, _translate("Dialog", "-"))
        self.operacion.setItemText(2, _translate("Dialog", "*"))
        self.operacion.setItemText(3, _translate("Dialog", "/"))
        self.flecha.setText(_translate("Dialog", " =>"))
        self.botonEjecutar.setText(_translate("Dialog", "EXECUTE"))
        self.nombre_primer_vector.setText(_translate("Dialog", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600; color:#ffffff;\">PRIMER VECTOR</span></p></body></html>"))
        self.nombre_segundo_vector.setText(_translate("Dialog", "<html><head/><body><p align=\"center\"><span style=\" font-weight:600; color:#ffffff;\">SEGUNDO VECTOR</span></p></body></html>"))
        self.primerVectorA.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.primerVectorB.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.primerVectorC.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.segundoVectorA.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.segundoVectorB.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.tercerVectorC.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
    def handleExecute(self):    
        
        operaciones = Operaciones()    
        primer_vector_a = int(self.primerVectorA.toPlainText())
        primer_vector_b = int(self.primerVectorB.toPlainText())
        primer_vector_c = int(self.primerVectorC.toPlainText())
        
        segundo_vector_a = int(self.segundoVectorA.toPlainText())
        segundo_vector_b = int(self.segundoVectorB.toPlainText())
        segundo_vector_c = int(self.tercerVectorC.toPlainText())
        
        #Operaciones.resta(primer_vector_a,primer_vector_b,primer_vector_c,segundo_vector_a,segundo_vector_b,segundo_vector_c)
        valor_operacion = self.operacion.currentText()
        
        if valor_operacion == "+":
                resultado = str(Operaciones.suma(primer_vector_a,primer_vector_b,primer_vector_c,segundo_vector_a,segundo_vector_b,segundo_vector_c))
                self.resultadoPoductoPunto.setText(resultado)
        elif valor_operacion == "-":
                resultado =str(Operaciones.resta(primer_vector_a,primer_vector_b,primer_vector_c,segundo_vector_a,segundo_vector_b,segundo_vector_c))
                self.resultadoPoductoPunto.setText(resultado)
        elif valor_operacion == "*":
                resultado_productoPunto = tuple(Operaciones.multiplicacion(primer_vector_a,primer_vector_b,primer_vector_c,segundo_vector_a,segundo_vector_b,segundo_vector_c))
                #self.resultadoPoductoPunto.setText(resultado_productoPunto)
                #self.resultadoProductoCruz.setText()
                #resultado_productoPuntoTotal = np.array(resultado_productoPunto)
                print(resultado_productoPunto)
                resultado_productoPunto1 =str(resultado_productoPunto[0])
                resultado_productoPunto2 = str(resultado_productoPunto[1])
                #print(resultado_productoPunto[1]
                self.resultadoPoductoPunto.setText(resultado_productoPunto1)
                self.resultadoProductoCruz.setText(resultado_productoPunto2)
                
        elif valor_operacion == "/":
                resultado =str(Operaciones.division(primer_vector_a,primer_vector_b,primer_vector_c,segundo_vector_a,segundo_vector_b,segundo_vector_c))
                self.resultadoPoductoPunto.setText(resultado)
        
        
        

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    ui.botonEjecutar.clicked.connect(ui.handleExecute)
    sys.exit(app.exec_())

